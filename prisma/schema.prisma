// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id                      String                    @id @default(auto()) @map("_id") @db.ObjectId
  first_name              String
  last_name               String
  middle_name             String
  email                   String                    @unique
  password                String
  role                    Role                      @default(USER)
  Event                   Event[]                   @relation("Event")
  events_security_asigned EventSecurityAssignment[] // Changed to use junction table
  CheckPoints             CheckPointsOnUser[]
  registered_events       RegisteredEvent[]
}

model Event {
  id              String                    @id @default(auto()) @map("_id") @db.ObjectId
  title           String
  description     String
  date            DateTime
  location        String
  user            User                      @relation(fields: [userId], references: [id], name: "Event", onDelete: NoAction, onUpdate: NoAction)
  userId          String                    @db.ObjectId
  checkPoints     CheckPoints[]
  security_person EventSecurityAssignment[] @relation("EventToEventSecurityAssignment")
  registered_user RegisteredEvent[]
}

model EventSecurityAssignment {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  userId  String @db.ObjectId
  eventId String @db.ObjectId

  user  User  @relation(fields: [userId], references: [id])
  event Event @relation(fields: [eventId], references: [id], name: "EventToEventSecurityAssignment", onDelete: Cascade)

  @@unique([userId, eventId])
}

model CheckPoints {
  id      String              @id @default(auto()) @map("_id") @db.ObjectId
  name    String
  guest   CheckPointsOnUser[]
  Event   Event?              @relation(fields: [eventId], references: [id])
  eventId String?             @db.ObjectId
}

model CheckPointsOnUser {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  userId        String      @db.ObjectId
  checkPointsId String      @db.ObjectId
  user          User        @relation(fields: [userId], references: [id])
  checkPoints   CheckPoints @relation(fields: [checkPointsId], references: [id])

  @@unique([userId, checkPointsId])
}

model RegisteredEvent {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  userId  String @db.ObjectId
  eventId String @db.ObjectId

  user  User  @relation(fields: [userId], references: [id])
  event Event @relation(fields: [eventId], references: [id])

  @@unique([userId, eventId])
}

enum Role {
  ADMIN
  USER
  SUPER_ADMIN
  SECURITY
}
